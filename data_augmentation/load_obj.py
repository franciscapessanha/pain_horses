# %%============================================================================#                          IMPORTS AND INITIALIZATIONS# ==============================================================================import matplotlib.pyplot as pltfrom mpl_toolkits.mplot3d import Axes3Dfrom data_augmentation.ObjLoader import *import numpy as npimport osimport pickleimport cv2 as cvfrom utils import *# %%============================================================================#                        DEAL WITH OBJ AND LMS MODEL# ==============================================================================def load_obj(HEAD_OBJ):	obj = ObjLoader()	obj.load_model(HEAD_OBJ)	# VERTICES	verts = []	for v in obj.vert_coords:		verts.append([float(j) for j in v])	vertices = np.vstack(verts)	"""	# TRIANGLES	triangles = []	for f in obj.faces:		triangles.append([int(j) - 1 for j in f])	triangles = np.vstack(triangles)	"""	return vertices, obj.facesdef load_lms_model(LMS_FILE):	f = open(LMS_FILE, 'r')	lms_model = f.readlines()	lms_model = [c.split(',') for c in lms_model]	lms_model = np.asarray([list(map(float, m)) for m in lms_model])	return lms_modeldef save_object(name, vertices, triangles):	filepath_out = os.path.join(os.getcwd(),'%s.obj' %name)	with open(filepath_out, 'w') as ofile:		for v in vertices:			# line = "v {v.x} {v.y} {v.z} " for full precision			line = "v {v[0]:.4f} {v[1]:.4f} {v[2]:.4f}\n"			#line = "vn 0.0 0.0 0.0\n"			line = line.format(v=v)			#ofile.write("vn 0.0 0.0 0.0 ")			ofile.write(line)		for f in triangles:				ofile.write(f)# ============================================================================#                      SEPARATE LANDMARKS OF INTEREST# ==============================================================================def get_lms_ROIs_frontal(lms_model, lms_gt):	# MODEL LANDMARKS	model_r_ear = [lms_model[0], lms_model[4]]	model_l_ear = [lms_model[5], lms_model[9]]	lms_model = lms_model[10:, :]  # to exclude the ears	model_r_eye = lms_model[0:6]	model_l_eye = lms_model[6:12]	model_r_nostril = lms_model[12:18]	model_l_nostril = lms_model[18:24]	# GROUND TRUTH LANDMARKS	gt_r_ear = np.vstack([lms_gt[0], lms_gt[4]])	gt_l_ear = np.vstack([lms_gt[5], lms_gt[9]])	gt_r_eye = lms_gt[28:34]	ordered = np.asarray([gt_r_eye[i, :] for i in [2, 3, 4, 5, 0, 1]])	gt_r_eye = ordered	gt_l_eye = lms_gt[10:16]	ordered = np.asarray([gt_l_eye[i, :] for i in [3, 4, 5, 0, 1, 2]])	gt_l_eye = ordered	gt_r_nostril = lms_gt[22:28]	ordered = np.asarray([gt_r_nostril[i, :] for i in [4, 3, 2, 1, 0, 5]])	gt_r_nostril = ordered	gt_l_nostril = lms_gt[16:22]	ordered = np.asarray([gt_l_nostril[i, :] for i in [5, 0, 1, 2, 3, 4]])	gt_l_nostril = ordered	img_shape = np.concatenate((gt_r_eye, gt_l_eye, gt_r_nostril, gt_l_nostril, gt_r_ear, gt_l_ear), axis=0)	model_shape = np.concatenate((model_r_eye, model_l_eye, model_r_nostril, model_l_nostril, model_r_ear, model_l_ear),	                             axis=0)[:, 1:]	indexes = np.concatenate((model_r_eye, model_l_eye, model_r_nostril, model_l_nostril, model_r_ear, model_l_ear),	                             axis=0)[:, :1]	return model_shape, img_shape, indexesdef get_indexes(vertices, model_shape):	indexes = []	for pt in model_shape:		indexes.append(np.where((np.round(vertices,2) == np.round(pt,2)).all(axis = 1))[0])	all_indexes = []	for i in range(len(model_shape)):		if len(indexes[i]) == 0:			pt = model_shape[i]			dists = []			for vert in vertices:				dists.append(np.linalg.norm(pt-vert))			index = dists.index(min(dists))			all_indexes.append(index)		else:			all_indexes.append(indexes[i])	return all_indexesdef get_lms_ROIs_profile(lms_model, lms_gt, vertices, verts_ears, outline_lms, ear_lms):	# MODEL LANDMARKS	model_eye = lms_model[0:6]	model_nostril = lms_model[6:12]	model_mouth = lms_model[12:16]	#model_outline = lms_model[16:]	model_outline = outline_lms[:-3]	model_ear = ear_lms[:,1:]	# GROUND TRUTH LANDMARKS	gt_eye = lms_gt[22:28]	gt_nostril = lms_gt[16:22]	gt_mouth = lms_gt[12:16]	gt_ear = lms_gt[0:6]	gt_ear = np.asarray([gt_ear[i] for i in range(len(gt_ear)-1, -1, -1)])	#indexes_out = [28, 29, 30, 31, 6, 7, 9, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44]	indexes_out = [28, 29, 30, 31, 6, 7, 10, 11, 8, 32, 9, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]	gt_outline = [lms_gt[i] for i in indexes_out]	img_shape = np.concatenate((gt_eye, gt_nostril, gt_mouth, gt_outline), axis=0)	model_shape = np.concatenate((model_eye, model_nostril, model_mouth, model_outline),	                             axis=0)[:, 1:]	#indexes = np.concatenate((model_eye, model_nostril, model_mouth, model_outline), axis=0)[:, :1]	indexes = []	for pt in model_shape:		indexes.append(np.where((np.round(vertices,2) == np.round(pt,2)).all(axis = 1))[0])	all_indexes = []	for i in range(len(model_shape)):		if len(indexes[i]) == 0:			pt = model_shape[i]			dists = []			for vert in vertices:				dists.append(np.linalg.norm(pt-vert))			index = dists.index(min(dists))			all_indexes.append(index)		else:			all_indexes.append(indexes[i])	#OPTIMIZE	indexes = []	for pt in verts_ears:		indexes.append(np.where((np.round(vertices,4) == np.round(pt,4)).all(axis = 1))[0])	ear_indexes = []	for i in range(len(verts_ears)):		if len(indexes[i]) == 0:			pt = verts_ears[i]			dists = []			for vert in vertices:				dists.append(np.linalg.norm(pt-vert))			index = dists.index(min(dists))			ear_indexes.append(index)		else:			ear_indexes.append(indexes[i])	indexes = []	for pt in model_ear:		indexes.append(np.where((np.round(vertices,4) == np.round(pt,4)).all(axis = 1))[0])	ear_lms_indexes = []	for i in range(len(model_ear)):		if len(indexes[i]) == 0:			pt = verts_ears[i]			dists = []			for vert in vertices:				dists.append(np.linalg.norm(pt-vert))			index = dists.index(min(dists))			ear_lms_indexes.append(index)		else:			ear_lms_indexes.append(indexes[i])	#print('ear indexes: ', ear_indexes)	indexes = []	for pt in model_ear:		indexes.append(np.where((np.round(verts_ears,4) == np.round(pt,4)).all(axis = 1))[0])	#print('indexes: ', indexes)	ear_local_indexes = []	for i in range(len(model_ear)):		if len(indexes[i]) == 0:			pt = model_shape[i]			dists = []			for vert in verts_ears:				dists.append(np.linalg.norm(pt-vert))			index = dists.index(min(dists))			ear_local_indexes.append(index)		else:			ear_local_indexes.append(indexes[i])	#print(indexes)	all_indexes = np.vstack(all_indexes)	ear_indexes = np.vstack(ear_indexes)	ear_local_indexes = np.vstack(ear_local_indexes)	return model_shape, img_shape, all_indexes, model_ear, gt_ear, ear_indexes, ear_local_indexes, ear_lms_indexes